package com.mtulkanov.po.order;

import com.mtulkanov.po.clients.ProductSpecificationRepository;
import com.mtulkanov.po.events.KafkaService;
import com.mtulkanov.po.exceptions.EventNotRaisedException;
import com.mtulkanov.po.exceptions.SpecificationNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * TODO: This is autogenerated Java-Doc.
 *
 * @author Nikita_Puzankov
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class ProductOrderServiceImpl implements ProductOrderService {
    private final ProductOrderRepository orderRepository;
    private final ProductSpecificationRepository specificationRepository;
    private final KafkaService kafkaService;

    public ProductOrder orderProductBySpecificationId(String specificationId) {
        if (specificationRepository.existsById(specificationId) == null) {
            String message = "There is no product specification with Id: " + specificationId;
            log.error(message);
            throw new SpecificationNotFoundException(message);
        }
        ProductOrder productOrder = new ProductOrder(
                null,
                specificationId,
                1L,
                ProductOrder.SUSPENDED
        );
        productOrder = orderRepository.save(productOrder);
        log.info("Created {}", productOrder);
        try {
            kafkaService.orderCreated(productOrder);
        } catch (EventNotRaisedException exception) {
            log.error("Could not raise OrderCreated event", exception);
            productOrder.setStatus(ProductOrder.REJECTED);
            orderRepository.save(productOrder);
        }
        return productOrder;
    }
}
